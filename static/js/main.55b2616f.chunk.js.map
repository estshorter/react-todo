{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InputForm","props","handleSubmit","event","onSubmit","state","text","setState","preventDefault","handleChange","target","value","id","this","className","type","placeholder","autoComplete","onChange","React","Component","TodoCount","count","incomplete","List","list","handleInputChange","onCompleted","Number","handleOnClick","onDeleted","todos","length","map","todo","completed","key","content","onClick","TodoApp","concat","currentId","handleCompleted","slice","modifiedTodoIdx","findIndex","handleDeleted","filter","getInComplete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55b2616f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass InputForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\"\n    }\n  }\n\n  handleSubmit = (event) => {\n    this.props.onSubmit(this.state.text)\n    this.setState({ text: \"\" });\n    event.preventDefault();\n  }\n\n  handleChange = (event) => {\n    this.setState({ text: event.target.value });\n  }\n\n  render() {\n    return (\n      <form id=\"js-form\" onSubmit={this.handleSubmit} >\n        <input id=\"js-form-input\" className=\"new-todo\" type=\"text\"\n          placeholder=\"What need to be done?\"\n          autoComplete=\"off\" value={this.state.text}\n          onChange={this.handleChange} />\n      </form>)\n  }\n}\n\nfunction TodoCount(props) {\n  return (\n    <footer className=\"footer\">\n      <span id\n        =\"js-todo-count\">全アイテム数: {props.count}、未完了タスク: {props.incomplete}</span>\n    </footer>)\n}\n\nfunction List(props) {\n  const handleInputChange = (event) => {\n    props.onCompleted(Number(event.target.id))\n  }\n  const handleOnClick = (event) => {\n    props.onDeleted(Number(event.target.id))\n  }\n  let list\n  if (props.todos.length > 0) {\n    list = <ul>\n      {props.todos.map((todo) => {\n        if (todo.completed) {\n          return <li key={todo.id}> <input id={todo.id} type=\"checkbox\" className=\"checkbox\" onChange={handleInputChange} ></input>\n            <s>{todo.content}</s><button className=\"delete\" id={todo.id} onClick={handleOnClick}>x</button></li>;\n        }\n        return <li key={todo.id}> <input id={todo.id} type=\"checkbox\" className=\"checkbox\" onChange={handleInputChange} ></input>\n          {todo.content}<button className=\"delete\" id={todo.id} onClick={handleOnClick}>x</button></li>;\n      })}\n    </ul>\n  }\n  return (\n    <div id=\"js-todo-list\" className=\"todo-list\">\n      {list}\n    </div>\n  )\n}\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [{ id: 0, content: \"ゴミ出し\", completed: false }, { id: 1, content: \"掃除\", completed: false }],\n      currentId: 2\n    }\n  }\n\n  handleSubmit = (text) => {\n    this.setState((state) => ({\n      todos: state.todos.concat({ id: state.currentId + 1, content: text, completed: false }),\n      currentId: state.currentId + 1\n    }));\n  }\n\n  handleCompleted = (id) => {\n    const todos = this.state.todos.slice()\n    const modifiedTodoIdx = todos.findIndex(todo => todo.id === id)\n    const todo = todos[modifiedTodoIdx]\n    todo.completed = !todo.completed\n    this.setState({ todos: todos })\n  }\n\n  handleDeleted = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    this.setState({ todos: todos, currentId: todos.length })\n  }\n\n  getInComplete = () => {\n    return this.state.todos.filter(todo => !todo.completed).length\n  }\n\n  render() {\n    return (\n      <div className=\"todoapp\">\n        <InputForm onSubmit={this.handleSubmit} />\n        <List todos={this.state.todos} onDeleted={this.handleDeleted} onCompleted={this.handleCompleted} />\n        <TodoCount count={this.state.todos.length} incomplete={this.getInComplete()} />\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}